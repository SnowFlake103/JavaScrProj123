import React, { useEffect, useState } from "react";
import "../css/HomePage.css";
import RecipeCard from "../components/RecipeCard";
import { supabase } from "../services/supabaseClient";

export default function HomePage() {
  const [recipes, setRecipes] = useState([]);
  const [filteredRecipes, setFilteredRecipes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [cuisineFilter, setCuisineFilter] = useState("–í—Å–µ –∫—É—Ö–Ω–∏");
  const [typeFilter, setTypeFilter] = useState("–í—Å–µ —Ç–∏–ø—ã");
  const [complexityFilter, setComplexityFilter] = useState("–í—Å–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏");
  const [searchQuery, setSearchQuery] = useState("");
  const [userId, setUserId] = useState(null);

  useEffect(() => {
    const getUser = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setUserId(session?.user?.id || null);
    };
    getUser();
  }, []);

  const loadRecipes = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from("recipes")
      .select("*")
      .order("created_at", { ascending: false });

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤:", error);
      setRecipes([]);
    } else {
      setRecipes(data || []);
      setFilteredRecipes(data || []);
    }
    setLoading(false);
  };

  useEffect(() => {
    loadRecipes();
  }, []);

  useEffect(() => {
    let filtered = [...recipes];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (searchQuery) {
      filtered = filtered.filter(recipe =>
        recipe.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        recipe.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—É—Ö–Ω–µ
    if (cuisineFilter !== "–í—Å–µ –∫—É—Ö–Ω–∏") {
      const cuisineMap = {
        "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è": "italian",
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è": "french",
        "–ê–∑–∏–∞—Ç—Å–∫–∞—è": "asian"
      };
      const cuisineValue = cuisineMap[cuisineFilter];
      filtered = filtered.filter(recipe => recipe.cuisine === cuisineValue);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –±–ª—é–¥–∞
    if (typeFilter !== "–í—Å–µ —Ç–∏–ø—ã") {
      const typeMap = {
        "–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ": "main",
        "–ó–∞–∫—É—Å–∫–∞": "starter",
        "–î–µ—Å–µ—Ä—Ç": "dessert"
      };
      const typeValue = typeMap[typeFilter];
      filtered = filtered.filter(recipe => recipe.type === typeValue);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (complexityFilter !== "–í—Å–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏") {
      const complexityMap = {
        "–õ–µ–≥–∫–æ": "–õ–µ–≥–∫–æ",
        "–°—Ä–µ–¥–Ω–µ": "–°—Ä–µ–¥–Ω–µ",
        "–°–ª–æ–∂–Ω–æ": "–°–ª–æ–∂–Ω–æ"
      };
      const complexityValue = complexityMap[complexityFilter];
      filtered = filtered.filter(recipe => recipe.complexity === complexityValue);
    }

    setFilteredRecipes(filtered);
  }, [recipes, cuisineFilter, typeFilter, complexityFilter, searchQuery]);

  const handleSearch = (e) => {
    e.preventDefault();
  };

  return (
    <main className="home-page">
      <section className="hero">
        <h1>–ú–∏—Ä –°–ø–∞–≥–µ—Ç—Ç–∏</h1>
        <p>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ª—É—á—à–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –ø–∞—Å—Ç—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ</p>
      </section>
      <section className="search-section">
        <form className="search-bar" onSubmit={handleSearch}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          <button type="submit" className="search-btn">üîç –ù–∞–π—Ç–∏</button>
        </form>
        <div className="filters">
          <select
            value={cuisineFilter}
            onChange={(e) => setCuisineFilter(e.target.value)}
          >
            <option>–í—Å–µ –∫—É—Ö–Ω–∏</option>
            <option>–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è</option>
            <option>–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è</option>
            <option>–ê–∑–∏–∞—Ç—Å–∫–∞—è</option>
          </select>
          <select
            value={typeFilter}
            onChange={(e) => setTypeFilter(e.target.value)}
          >
            <option>–í—Å–µ —Ç–∏–ø—ã</option>
            <option>–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ</option>
            <option>–ó–∞–∫—É—Å–∫–∞</option>
            <option>–î–µ—Å–µ—Ä—Ç</option>
          </select>
          <select
            value={complexityFilter}
            onChange={(e) => setComplexityFilter(e.target.value)}
          >
            <option>–í—Å–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</option>
            <option>–õ–µ–≥–∫–æ</option>
            <option>–°—Ä–µ–¥–Ω–µ</option>
            <option>–°–ª–æ–∂–Ω–æ</option>
          </select>
        </div>
      </section>
      {loading ? (
        <p style={{ textAlign: "center", marginTop: 40 }}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤...</p>
      ) : filteredRecipes.length > 0 ? (
        <div>
          <div className="recipes-header">
            <h2>–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã</h2>
            <div className="recipes-count">{filteredRecipes.length} —Ä–µ—Ü–µ–ø—Ç–æ–≤</div>
          </div>
          <div className="recipes-grid">
            {filteredRecipes.map((recipe) => (
              <RecipeCard key={recipe.id} recipe={recipe} userId={userId} />
            ))}
          </div>
        </div>
      ) : (
        <section className="empty-results">
          <div className="empty-icon">üçù</div>
          <h2>–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</p>
        </section>
      )}
    </main>
  );
}
